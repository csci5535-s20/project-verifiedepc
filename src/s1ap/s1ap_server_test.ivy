#lang ivy1.7

include order
include s1ap_packet
include s1ap_types
include s1ap_message

# The command-line parameters, with their defaults

parameter the_cid : cid = 0xd
parameter client_addr : ip.addr = 0x7f000001
parameter server_addr : ip.addr = 0x7f000002
parameter server_port : ip.port = 4443
parameter server_cid : cid = 0xb
parameter client_port : ip.port = 4987
#parameter max_stream_data : stream_pos = 0x2000

# Network setup

object endpoint_id = {
    type this = {client, server}
}

action endpoint_id_addr(ep_id : endpoint_id) returns (ep:ip.endpoint) = {
    ep.protocol := ip.udp;
    ep.addr := server_addr if ep_id = endpoint_id.server else client_addr;
    ep.port := client_port if ep_id = endpoint_id.client else server_port;
}

module s1ap_endpoint(ep_id) = {
    var ep : ip.endpoint
    var tls_id : tls_api.id
    var proc_code : pcode_bits
    after init {
        ep := endpoint_id_addr(ep_id);
            proc_code := 12;    # PC_initialUEMessage = 12
    }
}

# Create a client(eNB) and server(MME). The client has an instance of TLS

instance client : s1ap_endpoint(endpoint_id.client)
instance server : s1ap_endpoint(endpoint_id.server)

# We create sockets and bind them to the addresses that the client can use.

var sock : net.socket
var sock_alt : net.socket

instance tls_extensions : vector(tls.extension)

# This creates the sockets and also a TLS instance to be used by 'the_cid'.
after init {
    sock := net.open(endpoint_id.client,client.ep);
    client.tls_id := 0;
    server.tls_id := 1;
    var extns := tls_extensions.empty;
    extns : extns.append(make_transport_parameters);
    call tls_api.upper.create(0.false,extns);
}

# Here we have a bunch of conversions that map between cid's, IP endpoints,
# TLS instances and host ids. 
action endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {
    if src = client.ep {
        pid := endpoint_id.client;
    }
}

# Get the IP endpoint associated to a host id and socket number.
action socket_endpoint(host:endpoint_id,s:net.socket) returns (src:ip.endpoint) = {
    src := client.ep if host = endpoint_id.client
}

# Get the socket number associated to an IP endpoint.
action endpoint_to_socket(src:ip.endpoint) returns (socket:net.socket) = {
    if src = client.ep {
        socket := sock;
    }
}

# Get cid associated to a TLS instance
action tls_id_to_cid(tls_id:tls_api.id) returns (scid:cid) = {
    scid := the_cid;
}

#
# Restrict generation to packets from the designated client endpoints
# to the server endpoint.
#
before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:s1ap_packet) {
    if _generating {
        require src = client.ep;
        require dst = server.ep;
    };
}

#
# The protocol specification describes all the events for Initial UE
# attach procedure. When constructing the test mirror, however, we need
# to generate only events that are outputs of the environment. IVy doesn't
# have any built-in mechanism to do this, so we have to add a constraint
# to every generated action.
#
# We also add other pre-conditions to the actions to try to restrict
# them to relevant parameter values.
#
# To restrict the generated events, we use the built-in predicate 
# "_generating" that is true if this is a generated event.
#
before message.s1_setup_request.handle(m:message.s1_setup_request,scid:cid,dcid:cid,e:pcode_bits) = {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Initiating_Message';
        require m.default_paging_drx = 32;
    }
}

before message.s1_setup_response(m:message.s1_setup_response,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Successful_Outcome';
        require m.relative_capacity1 < 255;
    }
}

before message.initial_ue_message(m:message.initial_ue_message,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Initiating_Message';
    }
}

before message.downlink_nas_transport(m:message.downlink_nas_transport,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Initiating_Message';
    }
}

before message.uplink_nas_transport(m:message.downlink_nas_transport,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Initiating_Message';
    }
}

before message.initial_context_setup_request(m:message.downlink_nas_transport,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Initiating_Message';
    }
}

before message.initial_context_setup_response(m:message.downlink_nas_transport,scid:cid,dcid:cid,e:pcode_bits) {
    if _generating {
        require scid = the_cid;
        require m.p_code = e;
        require m.t_message = 'Successful_Outcome';
    }
}

#
# 
#

action client_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid)

around client_send_event {
    require src = client.ep;
    require dst = server.ep;
    require connected(the_cid) & dcid = connected_to(the_cid);
    ...
    call app_send_event(src,dst,dcid,s,data,1024,true);
}

export message.s1_setup_request.handle
export message.s1_setup_response.handle
export message.initial_ue_message.handle
export message.downlink_nas_transport.handle
export message.uplink_nas_transport.handle
export message.initial_context_setup_request.handle
export message.initial_context_setup_response.handle
export packet_event
export client_send_event

export action _finalize = {
    require conn_total_data(the_cid) > 0;
}


