#lang ivy1.7

include order
include collections
include byte_stream

# TLS Records
# ===========
#
# This document describes the structure of records transferred the TLS version 1.3. Currently,
# this is not a fully general description. In particular, it does not allow for TLS messages that
# span multiple TLS records.
#
# The information in this document is derived from [RFC 4256](https://tools.ietf.org/html/rfc5246)
# 

object tls = {

    # ### Protocol version

    # Protocol verion is two bytes, encoded as follows:
    #
    # | hi byte | lo byte | TLS version |
    # |---------|---------|-------------|
    # | 3       | 3       | 1.2         |

#struct {
#          uint8 major;
#          uint8 minor;
#      } ProtocolVersion;

    type protocol_version
    interpret protocol_version -> bv[16]

    # ### Content types
    # 
    # This section details the various content types that may appear
    # in serialized form in a TLS record.
   
    # #### Handshake
    #
    # The handshake protocol uses messages of type `handshake`. 
    #
    
    type handshake

#enum {
#          hello_request(0), client_hello(1), server_hello(2),
#          certificate(11), server_key_exchange (12),
#          certificate_request(13), server_hello_done(14),
#          certificate_verify(15), client_key_exchange(16),
#          finished(20), (255)
#      } HandshakeType;
#
#struct {
#          HandshakeType msg_type;    /* handshake type */
#          uint24 length;             /* bytes in message */
#          select (HandshakeType) {
#              case hello_request:       HelloRequest;
#              case client_hello:        ClientHello;
#              case server_hello:        ServerHello;
#              case certificate:         Certificate;
#              case server_key_exchange: ServerKeyExchange;
#              case certificate_request: CertificateRequest;
#              case server_hello_done:   ServerHelloDone;
#              case certificate_verify:  CertificateVerify;
#              case client_key_exchange: ClientKeyExchange;
#              case finished:            Finished;
#          } body;
#      } Handshake;



    # A handshake message has the following variants:
    #
    # | variant              | description  | tag |
    # |----------------------|--------------|-----|
    # | client_hello         | Client Hello | 1   |
    # | server_hello         | Client Hello | 2   |
    # | encrypted_extensions | Client Hello | 8   |
    #
    # The serialized form of `handshake` has the following four-byte prefix:
    #
    # | byte 0 | bytes 1..3 |
    # |--------|------------|
    # | tag    | length     | 
    #
    # where "length" is the length of the subsequent message in bytes.
    #

    # ##### Extensions
    #
    # A sequence of extension fields may be appended to a handshake message.
    # An extension has the following fields:
    #
    # - `etype` The extension type, encoded in two bytes
    # - `content` The extension content as a byte stream. In serialized form,
    #   this is prefixed by a two-byte length field.

# struct {
#          ExtensionType extension_type;
#          opaque extension_data<0..2^16-1>;
#      } Extension;
#
# enum {
#          signature_algorithms(13), (65535)
#      } ExtensionType;

    type extension

    type extension_type
    interpret extension_type -> bv[16]

    object unknown_extension = {
        variant this of extension = struct {
            etype : extension_type,
            content : stream_data
        }
    }

    # ##### Client and Server Hello
    #
    # The time in milliseconds since Jan 1, 1970 GMT is encoded as a 32-bit field.

    type gmt
    interpret gmt -> bv[32]

    # Random information is encoded in the following form. The
    # `random_bytes` field consists of exactly 28 bytes.

#struct {
#             uint32 gmt_unix_time;
#             opaque random_bytes[28];
#         } Random;
#
    type random = struct {
        gmt_unix_time : gmt,
        random_bytes : stream_data
            }

    # A cipher suite descriptor is a two-byte field used to indicate
    # a combination of cryptographic algorithms.

    type cipher_suite 
    interpret cipher_suite -> bv[16]

    # A compression method is a one-byte descriptor.

# enum { null(0), (255) } CompressionMethod;

    type compression_method
    interpret compression_method -> bv[1]

    # The Client Hello message has the following fields:
    # 
    # - `client_version` The protocol version in use by the client
    #
    # - `rand_info` The random information
    #
    # - `session_id`  a token that is transmitted by the client to refer
    #   to a previously established session. If there is no prior session, this
    #   field contains zero bytes. In serialized form it is prefixed by a one-byte
    #   length field.
    #
    # - `cipher_suites` is a sequence of cipher suite descriptors. In
    #   serialized form it is prefixed by a two-byte length field.
    #
    # - `compression_methods` is a sequence of one-byte compression method descriptors.
    #   In serialized form it is prefixed by a one-byte length field.
    # 
    # - `extensions` is a sequence of extensions. In serialized form it is prefixed by a two-byte
    #   length field.
 
#struct {
#          ProtocolVersion client_version;
#          Random random;
#          SessionID session_id;
#          CipherSuite cipher_suites<2..2^16-2>;
#          CompressionMethod compression_methods<1..2^8-1>;
#          select (extensions_present) {
#              case false:
#                  struct {};
#              case true:
#                  Extension extensions<0..2^16-1>;
#          };
#      } ClientHello;

   
    object client_hello = {
        variant this  of handshake = struct {
            client_version : protocol_version,
            rand_info : random,
            session_id : stream_data,
            cipher_suites : vector[cipher_suite],
            compression_methods : vector[compression_method],
            extensions : vector[extension]
        }
    }

    # The server Hello message has the following fields:
    # 
    # - `client_version` The protocol version in use by the client
    #
    # - `rand_info` The random information
    #
    # - `session_id`  a token that is transmitted by the client to refer
    #   to a previously established session. If there is no prior session, this
    #   field contains zero bytes. In serialized form it is prefixed by a one-byte
    #   length field.
    #
    # - `cipher_suites` is a sequence of cipher suite descriptors. In
    #   serialized form it is prefixed by a two-byte length field.
    #
    # - `compression_methods` is a sequence of one-byte compression method descriptors.
    #   In serialized form it is prefixed by a one-byte length field.
    # 
    # - `extensions` is a sequence of extensions. In serialized form it is prefixed by a two-byte
    #   length field.

# from RFC:   
#struct {
#          ProtocolVersion server_version;
#          Random random;
#          SessionID session_id;
#          CipherSuite cipher_suite;
#          CompressionMethod compression_method;
#          select (extensions_present) {
#              case false:
#                  struct {};
#              case true:
#                  Extension extensions<0..2^16-1>;
#          };
#      } ServerHello;

  
    object server_hello = {
        variant this of handshake = struct {
            server_version : protocol_version,
            rand_info : random,
            session_id : stream_data,
            the_cipher_suite : cipher_suite,
            the_compression_method : compression_method,
            extensions : vector[extension]
        }
    }

    # The Encrypted Extensions message has the following fields:
    # 
    # - `extensions` is a sequence of extensions. In serialized form it is prefixed by a two-byte
    #   length field.
 
# from RFC
   
    object encrypted_extensions = {
        variant this  of handshake = struct {
            extensions : vector[extension]
        }
   }

    # The unknown message is used here to cover all the messgae types that have
    # not yet been implemented.

    type message_type
    interpret message_type -> bv[8]

    object unknown_message = {
        variant this of handshake = struct {
            mtype : message_type,
            unknown_message_bytes : stream_data
        }
    }


    # ### Records

    # A record encapsulates TLS messages. It is prefixed by a one-byte
    # tag indicating the content type. The tag values are:
    #
    #
    #     | tag   | content type       |
    #     |-------|--------------------|
    #     | 20    | change cipher spec |
    #     | 21    | alert              |
    #     | 22    | handshake          |
    #     | 23    | application data   |
    #
    # The fields of all content types are:
    #
    # - `version` the protocol version
    # 
    # - `fragment` the record content
    #
    # The fragment content is preceded by a two-byte length field.
    # In general, messages may span fragment boundaries, but we do not
    # allow that here. The content type field indicates the type of messages
    # occurring in the fragment, as detailed below. 
  
# from RFC Spec
# enum {
#       change_cipher_spec(20), alert(21), handshake(22),
#       application_data(23), (255)
#   } ContentType;
#
# struct {
#       ContentType type;
#       ProtocolVersion version;
#       uint16 length;
#       opaque fragment[TLSPlaintext.length];
#   } TLSPlaintext;



  
    type record

    object handshake_record = {
        variant this of record = struct {
            version : protocol_version,
            fragment : vector[handshake]
        }
    }


# TODO: Why are the following with content: stream_data? How is this used? 

    object application_data_record = {
        variant this of record = struct {
            version : protocol_version,
            content : stream_data
        }
    }

    object change_cipher_spec = {
        variant this of record = struct {
            version : protocol_version,
            content : stream_data
        }
    }

    # attribute fragment.format = length[2]
    


}
