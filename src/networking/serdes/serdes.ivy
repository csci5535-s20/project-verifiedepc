#lang ivy

# Standard serializers and deserializers
# --------------------------------------
#
# Ivy provides standard binary serializers and deserializers that can
# be used, for example, to transfer data structures over a network,
# read and write files, and so on. The format is unspecified, and may
# change from one version of ivy to the next.
#

# The standard serializer
# =======================

object std_serializer = {}

# The standard deserializer
# =========================

object std_deserializer = {}

# Applying a serializer/deserializer
# ==================================
#
# The module `serdes` takes four parameters:
#
# - `data`: the type of data to be serialized/deserialized
# - `bytes`: a byte array type
# - `serializer`: the serializer (e.g., `std_serializer`)
# - `deserializer`: the deserializer (e.g., `std_deserializer`)

module serdes(data,bytes,serializer,deserializer) = {
    action to_bytes(x:data) returns(y:bytes)
    action from_bytes(y:bytes) returns(x:data)

    implementation {
	implement to_bytes {
	    <<<
	    `serializer` ser;
	    __ser(ser,x);
	    y.resize(ser.res.size());
	    for (unsigned i = 0; i < ser.res.size(); i++)
	        y[i] = (unsigned char) ser.res[i];
//	    std::copy(ser.res.begin(),ser.res.end(),y.begin());
	    >>>
	}
	implement from_bytes {
	    <<<
	    std::vector<char> buf(y.size());
	    std::copy(y.begin(),y.end(),buf.begin());
	    `deserializer` des(buf);
	    __deser(des,x);
	    >>>
	}
    }

    isolate iso = this
    attribute test = impl
}

<<< header

    class ivy_binary_ser;
    class ivy_binary_deser;

>>>

<<< member

    typedef ivy_binary_ser `std_serializer`;
    typedef ivy_binary_deser `std_deserializer`;

>>>


# ===================================
# ivy_to_cpp() reference for different functions to implement a deserializers and serializers. 
# Reference: https://github.com/microsoft/ivy/blob/da91befff0da4b0a176f6fb7dd0b253b34e990d6/ivy/ivy_to_cpp.py 
#
#struct ivy_ser {
#    virtual void  set(long long) = 0;
#    virtual void  set(bool) = 0;
#    virtual void  setn(long long inp, int len) = 0;
#    virtual void  set(const std::string &) = 0;
#    virtual void  open_list(int len) = 0;
#    virtual void  close_list() = 0;
#    virtual void  open_list_elem() = 0;
#    virtual void  close_list_elem() = 0;
#    virtual void  open_struct() = 0;
#    virtual void  close_struct() = 0;
#    virtual void  open_field(const std::string &) = 0;
#    virtual void  close_field() = 0;
#    virtual void  open_tag(int, const std::string &) {throw deser_err();}
#    virtual void  close_tag() {}
#    virtual ~ivy_ser(){}
#};
#struct ivy_binary_ser : public ivy_ser {
#    std::vector<char> res;
#    void setn(long long inp, int len) {
#        for (int i = len-1; i >= 0 ; i--)
#            res.push_back((inp>>(8*i))&0xff);
#    }
#    void set(long long inp) {
#        setn(inp,sizeof(long long));
#    }
#    void set(bool inp) {
#        set((long long)inp);
#    }
#    void set(const std::string &inp) {
#        for (unsigned i = 0; i < inp.size(); i++)
#            res.push_back(inp[i]);
#        res.push_back(0);
#    }
#    void open_list(int len) {
#        set((long long)len);
#    }
#    void close_list() {}
#    void open_list_elem() {}
#    void close_list_elem() {}
#    void open_struct() {}
#    void close_struct() {}
#    virtual void  open_field(const std::string &) {}
#    void close_field() {}
#    virtual void  open_tag(int tag, const std::string &) {
#        set((long long)tag);
#    }
#    virtual void  close_tag() {}
#};
#
#
